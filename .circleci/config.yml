---
version: 2.1
parameters:
  rollback:
    type: boolean
    default: false
docker_auth: &docker_auth
  username: $DOCKERHUB_USERNAME
  password: $DOCKERHUB_PASSWORD
defaults: &defaults
  docker:
    - image: greenpeaceinternational/p4-builder:latest
      auth:
        !!merge <<: *docker_auth
orbs:
  slack: circleci/slack@3.4.2
job_environments:
  common_environment: &common_environment
    CONTAINER_PREFIX: planet4-handbook
    PARENT_IMAGE: gcr.io/planet-4-151612/handbook
    MAX_REPLICA_COUNT: 1
    MIN_REPLICA_COUNT: 1
  develop_environment: &develop_environment
    APP_ENVIRONMENT: development
    APP_HOSTNAME: planet4-dev.greenpeace.org
    APP_HOSTPATH:
    CLOUDSQL_INSTANCE: p4-develop-k8s
    GCLOUD_CLUSTER: p4-development
    GOOGLE_PROJECT_ID: planet-4-151612
    HELM_NAMESPACE: handbook
    HELM_RELEASE: planet4-handbook
    WP_DB_NAME: planet4-handbook_wordpress_develop
    WP_STATELESS_BUCKET: planet4-handbook-stateless-develop
  release_build_env: &release_build_env
    GOOGLE_PROJECT_ID: planet4-production
  release_environment: &release_environment
    APP_ENVIRONMENT: staging
    APP_HOSTNAME: planet4-stage.greenpeace.org
    APP_HOSTPATH:
    CLOUDSQL_INSTANCE: planet4-prod
    GCLOUD_CLUSTER: planet4-production
    GOOGLE_PROJECT_ID: planet4-production
    HELM_NAMESPACE: handbook
    HELM_RELEASE: planet4-handbook-release
    WP_DB_NAME: planet4-handbook_wordpress_release
    WP_STATELESS_BUCKET: planet4-handbook-stateless-release
  production_environment: &production_environment
    APP_HOSTNAME: planet4.greenpeace.org
    APP_HOSTPATH:
    CLOUDSQL_INSTANCE: planet4-prod
    GCLOUD_CLUSTER: planet4-production
    GOOGLE_PROJECT_ID: planet4-production
    HELM_NAMESPACE: handbook
    HELM_RELEASE: planet4-handbook-master
    WP_DB_NAME: planet4-handbook_wordpress_master
    WP_STATELESS_BUCKET: planet4-handbook-stateless
commands:
  approve_job:
    description: "Approve an on-hold job."
    parameters:
      job_name:
        type: string
    steps:
      - run:
          name: Unhold job "<< parameters.job_name >>"
          command: |
            if [ -f /tmp/workspace/approve_workflow ]; then
              WORKFLOW_ID=$(cat /tmp/workspace/approve_workflow)
              url="https://circleci.com/api/v2/workflow/$WORKFLOW_ID/job"
              # Get workflow details
              workflow=$(curl -s -u "${CIRCLE_TOKEN}": -X GET --header "Content-Type: application/json" "$url")
              echo $workflow
              # Get approval job id
              job_id=$(echo "$workflow" | jq -r '.items[] | select(.name=="<< parameters.job_name >>") | .approval_request_id ')
              echo $job_id
              if [[ -z $job_id ]]; then
                echo "Approval ID not found"
                exit 1
              fi
              echo "Approving << parameters.job_name >> for workflow $url"
              echo "Job ID: ${job_id}"
              curl \
                --header "Content-Type: application/json" \
                -u "${CIRCLE_TOKEN}:" \
                -X POST \
                "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/approve/${job_id}"
            fi
job_definitions:
  visualtests_reference_steps: &visualtests_reference_steps
    docker:
      - image: greenpeaceinternational/planet4-backstop:latest
        auth:
          !!merge <<: *docker_auth
    working_directory: /src
    steps:
      - run: ./checkout.sh
      - run: ./mergescenarios.sh
      - run: mkdir /app/ -p
      - run: ./makehistory.sh
      - store_artifacts:
          path: /app/backstop_data
      - persist_to_workspace:
          root: /app
          paths:
            - backstop_data
  visualtests_compare_steps: &visualtests_compare_steps
    docker:
      - image: greenpeaceinternational/planet4-backstop:latest
        auth:
          !!merge <<: *docker_auth
    working_directory: /src
    parameters:
      notify:
        type: boolean
        default: false
    steps:
      - run: ./checkout.sh
      - run: ./mergescenarios.sh
      - run: mkdir /app/ -p
      - attach_workspace:
          at: /app
      - run: ./makecomparison.sh
      - store_artifacts:
          path: /app/backstop_data
      - when:
          condition: << parameters.notify >>
          steps:
            # Notify p4-activity-ci
            - slack/status:
                fail_only: true
                channel: C015MQGG3KQ
                webhook: ${SLACK_NRO_WEBHOOK}
  build_steps: &build_steps
    working_directory: ~/
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - composer-v5-{{ .Branch }}-{{ .Revision }}-{{ .BuildNum }}
            - composer-v5-{{ .Branch }}-{{ .Revision }}
            - composer-v5-{{ .Branch }}
            - composer-v5
      - run: |
          if [[ -d source/cache ]]; then ls -al source/cache; fi
      - run: activate-gcloud-account.sh
      - run: mkdir -p /tmp/workspace/var /tmp/workspace/src
      - run: echo "${CIRCLE_BUILD_NUM}" > /tmp/workspace/var/circle-build-num
      - run: make test
      - run: make rewrite
      - run: make checkout
      - run: make rewrite-app-repos
      - run: make copy
      - run: make bake
      - run: make persist
      - run: make build
      - run: make push
      - save_cache:
          key: composer-v5-{{ .Branch }}-{{ .Revision }}-{{ .BuildNum }}
          paths:
            - source/cache
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - var
            - src
  test_steps: &test_steps
    working_directory: ~/project
    docker:
      - image: gcr.io/planet-4-151612/p4-codeception:build-12
      - name: selenium
        image: selenium/standalone-chrome-debug:3.141.59-oxygen
        auth:
          !!merge <<: *docker_auth
    steps:
      - checkout
      - run: if [ ! -d "tests" ] || [ ! "$(ls -A tests)" ]; then circleci-agent step halt; fi
      - run: dockerize -wait tcp://selenium:4444
      - run: codeceptionify.sh .
      - run: codecept run --xml=junit.xml --html
      - run:
          name: Copy test artifacts
          when: always
          command: |
            mkdir -p /tmp/artifacts
            cp -r codeception/_output/. /tmp/artifacts
      - store_test_results:
          path: /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts
  deploy_steps: &deploy_steps
    working_directory: ~/
    parameters:
      notify:
        type: boolean
        default: false
      is_prod:
        type: boolean
        default: false
    steps:
      - checkout:
          path: /home/circleci/checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: activate-gcloud-account.sh
      - run: make prepare-helm
      - run: make backup
      - run: BUILD_TAG=build-$(cat /tmp/workspace/var/circle-build-num) make deploy-helm
      - run: make post-deploy
      - run:
          name: Extract workflow from commit message
          command: |
            UNHOLD_WORKFLOW_LINE=$(git --git-dir=/home/circleci/checkout/.git log --format=%B -n 1 "$CIRCLE_SHA1" | { grep '^\/unhold ' || true; } )
            echo "line $UNHOLD_WORKFLOW_LINE"
            if [[ -n $UNHOLD_WORKFLOW_LINE ]]; then
              WORKFLOW_ID=${UNHOLD_WORKFLOW_LINE#"/unhold "}
              echo "$WORKFLOW_ID"
              echo $WORKFLOW_ID > /tmp/workspace/approve_workflow
            fi
      - approve_job:
          job_name: instance-ready
      - when:
          condition: << parameters.is_prod >>
          steps:
            - run: echo $CIRCLE_WORKFLOW_ID > /tmp/workspace/approve_workflow
            - approve_job:
                job_name: rollback-staging
      - when:
          condition: << parameters.notify >>
          steps:
            # Notify p4-activity-ci
            - slack/status:
                channel: C015MQGG3KQ
                webhook: ${SLACK_NRO_WEBHOOK}
  finish_staging_steps: &finish_staging_steps
    working_directory: ~/
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: activate-gcloud-account.sh
      - run:
          name: Get hold-production status
          command: |
            url="https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job"
            workflow=$(curl -s -u "${CIRCLE_TOKEN}": -X GET --header "Content-Type: application/json" "$url")
            echo "$workflow" | jq -r '.items[] | select(.name=="hold-production") | .status ' >/tmp/workspace/prod_status
      - run:
          name: Rollback if production wasn't approved
          command: |
            if [ $(cat /tmp/workspace/prod_status) == 'success' ]; then
              echo "No need to rollback, production deploy was initiated so staging should stay at this version."
              exit 0;
            fi
            make rollback
  rollback_steps: &rollback_steps
    working_directory: ~/
    steps:
      - run: activate-gcloud-account.sh
      - run: mkdir -p /tmp/workspace/var /tmp/workspace/src
      - run: make checkout
      - run: make copy
      - run: make persist
      - run: BUILD_TAG="${CIRCLE_TAG}" make deploy
jobs:
  visualtests-reference-develop:
    environment:
      !!merge <<: *common_environment
      !!merge <<: *develop_environment
    !!merge <<: *visualtests_reference_steps
  visualtests-compare-develop:
    environment:
      !!merge <<: *common_environment
      !!merge <<: *develop_environment
    !!merge <<: *visualtests_compare_steps
  build-develop:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *develop_environment
    !!merge <<: *build_steps
  test-develop:
    environment:
      !!merge <<: *common_environment
      !!merge <<: *develop_environment
    !!merge <<: *test_steps
  deploy-develop:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *develop_environment
    !!merge <<: *deploy_steps
  visualtests-reference:
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_environment
    !!merge <<: *visualtests_reference_steps
  visualtests-compare:
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_environment
    !!merge <<: *visualtests_compare_steps
  build:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_build_env
    !!merge <<: *build_steps
  test-staging:
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_environment
    !!merge <<: *test_steps
  deploy-staging:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_environment
    !!merge <<: *deploy_steps
  finish-staging:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_environment
    !!merge <<: *finish_staging_steps
  rollback-staging:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_environment
    !!merge <<: *rollback_steps
  promote:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
    working_directory: /tmp/workspace/src
    steps:
      - checkout
      - run:
          name: Approve promotion
          command: promote-to-production.sh "${CIRCLE_WORKFLOW_ID}"
  deploy-production:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *production_environment
    !!merge <<: *deploy_steps
  rollback-production:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *production_environment
    !!merge <<: *rollback_steps
  create-sync-sql:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *production_environment
    working_directory: /tmp/workspace/src
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure
          command: |
            activate-gcloud-account.sh
      - run: echo $SQLPROXY_KEY | base64 -d > key.json
      - run: sql_create_sync_file.sh
  sync-to-staging:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *release_environment
    working_directory: /tmp/workspace/src
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure
          command: |
            activate-gcloud-account.sh
      - run: echo $SQLPROXY_KEY | base64 -d > key.json
      - run: sql_to_sync_site.sh release
  sync-to-develop:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *develop_environment
    working_directory: /tmp/workspace/src
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure
          command: |
            activate-gcloud-account.sh
      - run: echo $SQLPROXY_KEY | base64 -d > key.json
      - run: sql_to_sync_site.sh develop
  notify-sync:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *production_environment
    working_directory: /tmp/workspace/src
    steps:
      - checkout
      - run: activate-gcloud-account.sh
      - run: notify-sync-admins.sh
  backup:
    docker:
      - image: greenpeaceinternational/planet4-backup:latest
        auth:
          !!merge <<: *docker_auth
    environment:
      !!merge <<: *common_environment
      !!merge <<: *production_environment
    working_directory: /app
    steps:
      - run: echo "backup is running"
      - run: pwd
      - run: ls
      - run: ./go.sh
  commit-translated-files:
    !!merge <<: *defaults
    environment:
      !!merge <<: *common_environment
      !!merge <<: *production_environment
    working_directory: /tmp/workspace/src
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure
          command: activate-gcloud-account.sh
      - run:
          name: Commit languages
          command: /tmp/workspace/src/localscripts/commit_languages.sh
workflow_definitions:
  on_develop_commit: &on_develop_commit
    context: org-global
    filters:
      branches:
        only: main
  on_release_tag: &on_release_tag
    context: org-global
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /^v.*/
workflows:
  develop:
    jobs:
      - visualtests-reference-develop:
          !!merge <<: *on_develop_commit
      - build-develop:
          !!merge <<: *on_develop_commit
      - deploy-develop:
          !!merge <<: *on_develop_commit
          requires:
            - build-develop
            - visualtests-reference-develop
      - test-develop:
          !!merge <<: *on_develop_commit
          requires:
            - deploy-develop
      - visualtests-compare-develop:
          !!merge <<: *on_develop_commit
          requires:
            - deploy-develop
  production:
    unless: << pipeline.parameters.rollback >>
    jobs:
      - visualtests-reference:
          !!merge <<: *on_release_tag
      - build:
          !!merge <<: *on_release_tag
      - deploy-staging:
          !!merge <<: *on_release_tag
          requires:
            - build
            - visualtests-reference
      - test-staging:
          !!merge <<: *on_release_tag
          requires:
            - deploy-staging
      - visualtests-compare:
          !!merge <<: *on_release_tag
          notify: true
          requires:
            - deploy-staging
      - rollback-staging:
          !!merge <<: *on_release_tag
          type: approval
          requires:
            - deploy-staging
      - finish-staging:
          !!merge <<: *on_release_tag
          requires:
            - rollback-staging
      - hold-production:
          !!merge <<: *on_release_tag
          type: approval
          requires:
            - deploy-staging
      - deploy-production:
          !!merge <<: *on_release_tag
          notify: true
          is_prod: true
          requires:
            - test-staging
            - hold-production
  rollback:
    when: << pipeline.parameters.rollback >>
    jobs:
      - rollback-staging:
          !!merge <<: *on_release_tag
      - hold-production:
          !!merge <<: *on_release_tag
          type: approval
          requires:
            - rollback-staging
      - rollback-production:
          !!merge <<: *on_release_tag
          requires:
            - hold-production
  backup:
    triggers:
      - schedule:
          cron: "30 02 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - backup:
          context: org-global
  commit-translated-files:
    jobs:
      - commit-translated-files:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /lang.*/
